# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        """Mixed up 2 things. 1. Check for SameTree() 2. Check for isSubTree()Basically we need to implement 2 recursions."""
        """Case 1 when root has value and subRoot is null then return True. Yes that is what the question wants
        Case 2 when root is null and subRoot has value return False
        Case when both are equal (check this by calling isSameTree() function)return True
        Otherwise check if left subtree is equal to subRoot or right is equal to subRoot. Either one is equal then return True"""
        if not subRoot:
            return True
        if not root:
            return False
        if self.isSameTree(root, subRoot):
            return True
        return (self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot))
        
    def isSameTree(self,  s, t):
        if not s and not t:
            return True
        elif (not s and t) or (s and not t):
            return False
        elif(s.val != t.val):
            return False
        else:
            return (self.isSameTree(s.left, t.left) and self.isSameTree(s.right, t.right))
        """
        if not root and not subRoot:
            return True
        elif (not root and subRoot) or (root and not subRoot):
            return False
        elif(root.val != subRoot.val):
            return (self.isSubtree(root.left, subRoot) or
            self.isSubtree(root.right, subRoot))
        else:
            return (self.isSubtree(root.left, subRoot.left) and self.isSubtree(root.right, subRoot.right))
            """
        
        
